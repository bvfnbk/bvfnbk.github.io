<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>web on Notes of bvfnbk</title><link>https://bvfnbk.github.io/tags/web/</link><description>Recent content in web on Notes of bvfnbk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 25 Aug 2022 10:04:45 +0200</lastBuildDate><atom:link href="https://bvfnbk.github.io/tags/web/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview: Web Components</title><link>https://bvfnbk.github.io/posts/web-components/overview/</link><pubDate>Thu, 25 Aug 2022 10:04:45 +0200</pubDate><guid>https://bvfnbk.github.io/posts/web-components/overview/</guid><description>Overview The following listing provides a tl;dr; version of a custom web component, written in vanilla JavaScript:
const template = document.createElement(&amp;#39;template&amp;#39;); template.innerHTML = ` &amp;lt;style&amp;gt; span#message { color: brown; font-weight: bolder; } &amp;lt;/style&amp;gt; &amp;lt;div&amp;gt; &amp;lt;span id=&amp;#34;message&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; `; class Component extends HTMLElement { static get observedAttributes() { return [&amp;#39;message&amp;#39;]; } constructor() { super(); } connectedCallback() { this.attachShadow({mode: &amp;#39;open&amp;#39;}); this.shadowRoot.appendChild(template.content.cloneNode(true)); this._message = this.shadowRoot.getElementById(&amp;#39;message&amp;#39;); } attributeChangedCallback(attributeName, oldValue, newValue) { if (attributeName === &amp;#39;message&amp;#39;) { this.</description></item><item><title>A 'Greeter' Web Component</title><link>https://bvfnbk.github.io/posts/web-components/greeting/</link><pubDate>Mon, 22 Aug 2022 16:13:21 +0200</pubDate><guid>https://bvfnbk.github.io/posts/web-components/greeting/</guid><description>Vanilla web components are custom components written in plain JavaScript without any of the usual component frameworks like React, Vue or Angular and alike involved.
We will create a &amp;ldquo;greeter&amp;rdquo; element which is supposed to render a greeting message to the page. First, the message will be constant, but later it is supposed to be configurable using an attribute.
Constant &amp;ldquo;Hello World&amp;rdquo; For the start, we define an element &amp;lt;hello-message /&amp;gt;, which, when inserted into the page source, renders the most infamous</description></item></channel></rss>