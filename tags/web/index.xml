<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>web on Notes of bvfnbk</title><link>https://bvfnbk.github.io/tags/web/</link><description>Recent content in web on Notes of bvfnbk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 05 Oct 2022 12:34:34 +0200</lastBuildDate><atom:link href="https://bvfnbk.github.io/tags/web/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing a Web Component</title><link>https://bvfnbk.github.io/posts/example-web-components/testing/</link><pubDate>Wed, 05 Oct 2022 12:34:34 +0200</pubDate><guid>https://bvfnbk.github.io/posts/example-web-components/testing/</guid><description>The created web component (admittedly) is very simple and does not implement sophisticated behaviour (or any behaviour for that matter). It should be tested nonetheless.
The part of the software stack actually running the tests is called a test runner. Another important part is the DSL to be used to write the tests. Basically install the following packages:
karma (test runner) jasmine-core (test DSL) karma-jasmine karma-chrome-launcher karma-firefox-launcher Please note:</description></item><item><title>Overview: Web Components</title><link>https://bvfnbk.github.io/posts/example-web-components/overview/</link><pubDate>Thu, 25 Aug 2022 10:04:45 +0200</pubDate><guid>https://bvfnbk.github.io/posts/example-web-components/overview/</guid><description>Examples A &amp;lsquo;Greeter&amp;rsquo; Web Component Define a JavaScript web component. Add a watched string attribute. Update the attribute using JavaScript. Testing a Web Component Listening to Attribute Changes Attributes may be used during the construction of the shadow element DOM using getAttribute(name). This uses the value of the attribute which is set in its definition.
Only registered attributes trigger the attributeChangedCallback. Use the static observedAttributes property to announce the attributes which should be monitored.</description></item><item><title>&lt;hello-message> Component</title><link>https://bvfnbk.github.io/posts/example-web-components/hello-message/</link><pubDate>Mon, 22 Aug 2022 16:13:21 +0200</pubDate><guid>https://bvfnbk.github.io/posts/example-web-components/hello-message/</guid><description>Vanilla web components are custom components written in plain JavaScript - not using any of the usual component frameworks like React, Vue or Angular and alike involved.
The following source code snippet defines a &amp;lt;hello-message /&amp;gt; component, written in plain JavaScript. It supports a single attribute named name:
Create a file src/public/js/HelloWorld.js with the following contents:
/* * Define template: * * - create `template` element * - set contents (`innerHTML`) - including `&amp;lt;style&amp;gt;` block.</description></item></channel></rss>