<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>test on Notes of bvfnbk</title><link>https://bvfnbk.github.io/tags/test/</link><description>Recent content in test on Notes of bvfnbk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 20 Mar 2023 11:32:53 +0100</lastBuildDate><atom:link href="https://bvfnbk.github.io/tags/test/index.xml" rel="self" type="application/rss+xml"/><item><title>Components as Bundle</title><link>https://bvfnbk.github.io/posts/example-web-components/components-as-bundle/</link><pubDate>Mon, 20 Mar 2023 11:32:53 +0100</pubDate><guid>https://bvfnbk.github.io/posts/example-web-components/components-as-bundle/</guid><description>The latest example defined another component which is transpiled, together with the first component into a dist/ directory containing an index.html ready to use the components.
There is nothing especially wrong with the proposed structure - one can build components using TypeScript starting from this foundation. However, the build layout contains quite a few errors and pitfalls making it more difficult than actually required:
import of other modules not possible without further ado, components and other modules need to be included in index.</description></item><item><title>A &lt;message-input> Web Component</title><link>https://bvfnbk.github.io/posts/example-web-components/message-input/</link><pubDate>Wed, 08 Mar 2023 09:59:18 +0100</pubDate><guid>https://bvfnbk.github.io/posts/example-web-components/message-input/</guid><description>The example still uses plain JavaScript to listen to input events and to update the message. This post replaces the original &amp;lt;label&amp;gt; and &amp;lt;input&amp;gt; element with a new component.
The sources to this web component and others can be found on GitHub: https://github.com/bvfnbk/example-web-components
The component gets defined in src/ts/MessageInput.ts and its template basically replaces the original elements
&amp;lt;label for=&amp;#34;someInput&amp;#34;&amp;gt;Message:&amp;lt;/label&amp;gt; &amp;lt;input id=&amp;#34;someInput&amp;#34; type=&amp;#34;text&amp;#34;/&amp;gt; and implicitly handles the input event on the &amp;lt;input&amp;gt; element.</description></item><item><title>A &lt;hello-message> TypeScript Web Component</title><link>https://bvfnbk.github.io/posts/example-web-components/ts-hello-message/</link><pubDate>Fri, 03 Mar 2023 10:31:44 +0100</pubDate><guid>https://bvfnbk.github.io/posts/example-web-components/ts-hello-message/</guid><description>A &amp;lt;hello-message&amp;gt; Web Component introduced vanilla web components using JavaScript. This is a good start but, out of reasons, using JavaScript might not be desirable.
At the moment, there is only one component and its test and just right now might be a good moment to convert the sources to TypeScript.
Preparation Create a new package and simply copy the src/public/js/HelloMessage.js to src/ts/HelloMessage.ts.
Please note: The component is basically left &amp;ldquo;as is&amp;rdquo; at the moment for the index.</description></item><item><title>Testing the &lt;hello-message> Web Component</title><link>https://bvfnbk.github.io/posts/example-web-components/testing-hello-message/</link><pubDate>Wed, 05 Oct 2022 12:34:34 +0200</pubDate><guid>https://bvfnbk.github.io/posts/example-web-components/testing-hello-message/</guid><description>The created web component (admittedly) is very simple and does not implement sophisticated behaviour (or any behaviour for that matter). It should be tested nonetheless.
The part of the software stack actually running the tests is called a test runner. Another important part is the DSL to be used to write the tests. Basically install the following packages:
karma (test runner) jasmine-core (test DSL) karma-jasmine karma-chrome-launcher karma-firefox-launcher Please note:
Jasmine provides the DSL to write the tests (for Behaviour Driven Development (BDD)).</description></item></channel></rss>