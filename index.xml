<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes of bvfnbk</title><link>https://bvfnbk.github.io/</link><description>Recent content on Notes of bvfnbk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 20 Jan 2023 14:01:06 +0100</lastBuildDate><atom:link href="https://bvfnbk.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Building a Webjar</title><link>https://bvfnbk.github.io/posts/webjars/</link><pubDate>Fri, 20 Jan 2023 14:01:06 +0100</pubDate><guid>https://bvfnbk.github.io/posts/webjars/</guid><description>Everytime when I create an application including a web-based front-end, I am thinking about the &amp;ldquo;best&amp;rdquo; way to build and package its artifacts up. The choices for JVM-based artifacts are limited but front-end artifacts basically provide all file formats and scripting languages available to the platform the artifact is built upon.
Recently, I started to serve the frontend assets as static files from within my service for better or for worse.</description></item><item><title>Desktop Application Filesystem Environments</title><link>https://bvfnbk.github.io/posts/application-environment/</link><pubDate>Tue, 25 Oct 2022 17:13:33 +0200</pubDate><guid>https://bvfnbk.github.io/posts/application-environment/</guid><description>An application typically manages a specific set of directories and files. The base directories can be categorized by the following table:
Directory Purpose Comment Configuration Configuration files. The application may require a single configuration file only. Executables Scripts and (binary) executables. Tools may be provided to the user. Data Persistent data files. E.g. databases; it may not be possible to recreate these files from scratch.</description></item><item><title>Testing the &lt;hello-message> Web Component</title><link>https://bvfnbk.github.io/posts/example-web-components/testing-hello-message/</link><pubDate>Wed, 05 Oct 2022 12:34:34 +0200</pubDate><guid>https://bvfnbk.github.io/posts/example-web-components/testing-hello-message/</guid><description>The created web component (admittedly) is very simple and does not implement sophisticated behaviour (or any behaviour for that matter). It should be tested nonetheless.
The part of the software stack actually running the tests is called a test runner. Another important part is the DSL to be used to write the tests. Basically install the following packages:
karma (test runner) jasmine-core (test DSL) karma-jasmine karma-chrome-launcher karma-firefox-launcher Please note:</description></item><item><title>Overview: Web Components</title><link>https://bvfnbk.github.io/posts/example-web-components/overview/</link><pubDate>Thu, 25 Aug 2022 10:04:45 +0200</pubDate><guid>https://bvfnbk.github.io/posts/example-web-components/overview/</guid><description>Examples A &amp;lt;hello-message&amp;gt; Web Component Define a JavaScript web component. Add a watched string attribute. Update the attribute using JavaScript. Testing the &amp;lt;hello-message&amp;gt; Web Component Listening to Attribute Changes Attributes may be used during the construction of the shadow element DOM using getAttribute(name). This uses the value of the attribute which is set in its definition.
Only registered attributes trigger the attributeChangedCallback. Use the static observedAttributes property to announce the attributes which should be monitored.</description></item><item><title>&lt;hello-message> Component</title><link>https://bvfnbk.github.io/posts/example-web-components/hello-message/</link><pubDate>Mon, 22 Aug 2022 16:13:21 +0200</pubDate><guid>https://bvfnbk.github.io/posts/example-web-components/hello-message/</guid><description>Vanilla web components are custom components written in plain JavaScript - not using any of the usual component frameworks like React, Vue or Angular and alike involved.
The following source code snippet defines a &amp;lt;hello-message /&amp;gt; component, written in plain JavaScript. It supports a single attribute named name:
Create a file src/public/js/HelloWorld.js with the following contents:
/* * Define template: * * - create `template` element * - set contents (`innerHTML`) - including `&amp;lt;style&amp;gt;` block.</description></item><item><title>hugo</title><link>https://bvfnbk.github.io/posts/man/hugo/</link><pubDate>Fri, 22 Jul 2022 14:39:18 +0200</pubDate><guid>https://bvfnbk.github.io/posts/man/hugo/</guid><description>Name hugo - hugo builds your site
Examples Site A new site can be created with
$ hugo new site $NAME To create the site in the current working directory, use
$ hugo new site . Eventually add --force if the current working directory is not empty.
Posts A new post can be created with:
$ hugo new posts/$NAME.md # or: $ hugo new posts/$NAME/index.md This either creates the file posts/$NAME.</description></item><item><title>git</title><link>https://bvfnbk.github.io/posts/man/git/</link><pubDate>Fri, 22 Jul 2022 12:04:40 +0200</pubDate><guid>https://bvfnbk.github.io/posts/man/git/</guid><description>Name git - the stupid content tracker
Examples Initialize Repository $ mkdir repository/ $ cd repository/ $ touch README.md $ git add README.md $ git commit -m &amp;#39;initial commit&amp;#39; Pushing $ git push [--set-upstream | -u] $REMOTE $BRANCH [--force] Remotes List $ git remote -v origin git@github.com:$USER/$REPOSITORY.git (fetch) origin git@github.com:$USER/$REPOSITORY.git (push) Delete $ git remote remove $NAME Add $ git remote add $NAME git@github.com:$USER/$REPOSITORY.git Submodules Add Submodule $ cd working-directory/ $ git submodule add $URL [$MODULE_PATH] This creates (or updates) the .</description></item><item><title>date</title><link>https://bvfnbk.github.io/posts/man/date/</link><pubDate>Fri, 22 Jul 2022 10:34:35 +0200</pubDate><guid>https://bvfnbk.github.io/posts/man/date/</guid><description>Name date - display or set date and time
Examples Print Formatted Date/Time Date/Time with time zone offset (format: +hhmm):
date +%Y-%m-%d&amp;#39;T&amp;#39;%H:%M:%s%z 2022-07-22T10:51:14+0200 or shorter
date +%F&amp;#39;T&amp;#39;%T%z 2022-07-22T10:51:14+0200 Date/Time with time zone offset (format +hh:mm):
On macOS TZ=Europe/Berlin date -Iseconds -r $(date +%s) 2022-07-22T10:33:40+02:00 On Linux date +%F&amp;#39;T&amp;#39;%T%:z 2022-07-22T10:33:40+02:00</description></item><item><title>Personal GitHub Pages using Hugo</title><link>https://bvfnbk.github.io/posts/hugo/</link><pubDate>Fri, 22 Jul 2022 10:33:40 +0200</pubDate><guid>https://bvfnbk.github.io/posts/hugo/</guid><description>I used to play around with my personal GitHub page every once in a while. I used to set up the repository and initialized it using the recommended Jekyll way. Jekyll is a site generator implemented in Ruby - which is already there on my MacBook (severely outdated) or a brew install away (which might be an over-simplification).
It is equally easy to install Jekyll for local development. This alone would be great if not for the software upgrades coming in from time to time.</description></item><item><title>pbcopy</title><link>https://bvfnbk.github.io/posts/man/pbcopy/</link><pubDate>Tue, 12 Jul 2022 17:14:20 +0200</pubDate><guid>https://bvfnbk.github.io/posts/man/pbcopy/</guid><description>Name pbcopy - provide copying and pasting to the clipboard from command line
Synopsis pbcopy Description pbcopy takes the standard input and places it in the clipboard (there are different boards available; cf. man pbcopy for more details).
Example pbcopy &amp;lt; $HOME/.ssh/id_ed25519.pub</description></item><item><title>ssh-keygen</title><link>https://bvfnbk.github.io/posts/man/ssh-keygen/</link><pubDate>Tue, 12 Jul 2022 16:32:11 +0200</pubDate><guid>https://bvfnbk.github.io/posts/man/ssh-keygen/</guid><description>Name ssh-keygen - OpenSSH authentication key utility.
Synopsis ssh-keygen [-t rsa | ed25519 | ...] [-b bits] [-N new_passphrase] [-f output_keyfile] Examples Interactive ssh-keygen asks for the path to the output file and the passphrase for the private key.
ssh-keygen -t rsa -b 4096 -C &amp;#34;user@domain.tld&amp;#34; ssh-keygen -t ed25519 -C &amp;#34;user@domain.tld&amp;#34; Please note: The rsa algorith is the default. ed25519 might not be supported on all systems.
For Scripts ssh-keygen -t rsa -b 4096 -C &amp;#34;user@domain.</description></item><item><title>About</title><link>https://bvfnbk.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bvfnbk.github.io/about/</guid><description>Hi,
This is my private space where I store my personal notes about technical topics, manuals and the current status of my current &amp;ldquo;pet projects&amp;rdquo;.
Disclaimer The documents and articles found on this site are my personal notes and describe my personal opinion. Despite all due care and attention put into the compilation of the information, I cannot guarantee that all articles are correct and complete.
Please use the information found here at your own risk.</description></item><item><title>Tags</title><link>https://bvfnbk.github.io/tags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bvfnbk.github.io/tags/</guid><description>asdf</description></item></channel></rss>